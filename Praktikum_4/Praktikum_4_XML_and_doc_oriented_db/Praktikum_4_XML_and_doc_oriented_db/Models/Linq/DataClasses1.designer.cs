#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Praktikum_4_XML_and_doc_oriented_db.Models.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Praktikum")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBeiträge(Beiträge instance);
    partial void UpdateBeiträge(Beiträge instance);
    partial void DeleteBeiträge(Beiträge instance);
    partial void InsertBenutzer(Benutzer instance);
    partial void UpdateBenutzer(Benutzer instance);
    partial void DeleteBenutzer(Benutzer instance);
    partial void InsertDiskussionen(Diskussionen instance);
    partial void UpdateDiskussionen(Diskussionen instance);
    partial void DeleteDiskussionen(Diskussionen instance);
    partial void InsertDokumente(Dokumente instance);
    partial void UpdateDokumente(Dokumente instance);
    partial void DeleteDokumente(Dokumente instance);
    partial void InsertDokumenteHeftenAnBeiträge(DokumenteHeftenAnBeiträge instance);
    partial void UpdateDokumenteHeftenAnBeiträge(DokumenteHeftenAnBeiträge instance);
    partial void DeleteDokumenteHeftenAnBeiträge(DokumenteHeftenAnBeiträge instance);
    partial void InsertForen(Foren instance);
    partial void UpdateForen(Foren instance);
    partial void DeleteForen(Foren instance);
    partial void InsertMitarbeiter(Mitarbeiter instance);
    partial void UpdateMitarbeiter(Mitarbeiter instance);
    partial void DeleteMitarbeiter(Mitarbeiter instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertProfessoren(Professoren instance);
    partial void UpdateProfessoren(Professoren instance);
    partial void DeleteProfessoren(Professoren instance);
    partial void InsertStudenten(Studenten instance);
    partial void UpdateStudenten(Studenten instance);
    partial void DeleteStudenten(Studenten instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PraktikumConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Beiträge> Beiträges
		{
			get
			{
				return this.GetTable<Beiträge>();
			}
		}
		
		public System.Data.Linq.Table<Benutzer> Benutzers
		{
			get
			{
				return this.GetTable<Benutzer>();
			}
		}
		
		public System.Data.Linq.Table<Diskussionen> Diskussionens
		{
			get
			{
				return this.GetTable<Diskussionen>();
			}
		}
		
		public System.Data.Linq.Table<Dokumente> Dokumentes
		{
			get
			{
				return this.GetTable<Dokumente>();
			}
		}
		
		public System.Data.Linq.Table<DokumenteHeftenAnBeiträge> DokumenteHeftenAnBeiträges
		{
			get
			{
				return this.GetTable<DokumenteHeftenAnBeiträge>();
			}
		}
		
		public System.Data.Linq.Table<Foren> Forens
		{
			get
			{
				return this.GetTable<Foren>();
			}
		}
		
		public System.Data.Linq.Table<Mitarbeiter> Mitarbeiters
		{
			get
			{
				return this.GetTable<Mitarbeiter>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<Professoren> Professorens
		{
			get
			{
				return this.GetTable<Professoren>();
			}
		}
		
		public System.Data.Linq.Table<Studenten> Studentens
		{
			get
			{
				return this.GetTable<Studenten>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DiskussionGesichtet")]
		public int DiskussionGesichtet([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Beiträge")]
	public partial class Beiträge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Mitteilung;
		
		private int _DiskussionsID;
		
		private string _Benutzer;
		
		private System.Nullable<System.DateTime> _Änderungsdatum;
		
		private EntitySet<DokumenteHeftenAnBeiträge> _DokumenteHeftenAnBeiträges;
		
		private EntitySet<DokumenteHeftenAnBeiträge> _DokumenteHeftenAnBeiträges1;
		
		private EntityRef<Benutzer> _Benutzer1;
		
		private EntityRef<Diskussionen> _Diskussionen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMitteilungChanging(string value);
    partial void OnMitteilungChanged();
    partial void OnDiskussionsIDChanging(int value);
    partial void OnDiskussionsIDChanged();
    partial void OnBenutzerChanging(string value);
    partial void OnBenutzerChanged();
    partial void OnÄnderungsdatumChanging(System.Nullable<System.DateTime> value);
    partial void OnÄnderungsdatumChanged();
    #endregion
		
		public Beiträge()
		{
			this._DokumenteHeftenAnBeiträges = new EntitySet<DokumenteHeftenAnBeiträge>(new Action<DokumenteHeftenAnBeiträge>(this.attach_DokumenteHeftenAnBeiträges), new Action<DokumenteHeftenAnBeiträge>(this.detach_DokumenteHeftenAnBeiträges));
			this._DokumenteHeftenAnBeiträges1 = new EntitySet<DokumenteHeftenAnBeiträge>(new Action<DokumenteHeftenAnBeiträge>(this.attach_DokumenteHeftenAnBeiträges1), new Action<DokumenteHeftenAnBeiträge>(this.detach_DokumenteHeftenAnBeiträges1));
			this._Benutzer1 = default(EntityRef<Benutzer>);
			this._Diskussionen = default(EntityRef<Diskussionen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mitteilung", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Mitteilung
		{
			get
			{
				return this._Mitteilung;
			}
			set
			{
				if ((this._Mitteilung != value))
				{
					this.OnMitteilungChanging(value);
					this.SendPropertyChanging();
					this._Mitteilung = value;
					this.SendPropertyChanged("Mitteilung");
					this.OnMitteilungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiskussionsID", DbType="Int NOT NULL")]
		public int DiskussionsID
		{
			get
			{
				return this._DiskussionsID;
			}
			set
			{
				if ((this._DiskussionsID != value))
				{
					if (this._Diskussionen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiskussionsIDChanging(value);
					this.SendPropertyChanging();
					this._DiskussionsID = value;
					this.SendPropertyChanged("DiskussionsID");
					this.OnDiskussionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Benutzer", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Benutzer
		{
			get
			{
				return this._Benutzer;
			}
			set
			{
				if ((this._Benutzer != value))
				{
					if (this._Benutzer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBenutzerChanging(value);
					this.SendPropertyChanging();
					this._Benutzer = value;
					this.SendPropertyChanged("Benutzer");
					this.OnBenutzerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Änderungsdatum", DbType="DateTime")]
		public System.Nullable<System.DateTime> Änderungsdatum
		{
			get
			{
				return this._Änderungsdatum;
			}
			set
			{
				if ((this._Änderungsdatum != value))
				{
					this.OnÄnderungsdatumChanging(value);
					this.SendPropertyChanging();
					this._Änderungsdatum = value;
					this.SendPropertyChanged("Änderungsdatum");
					this.OnÄnderungsdatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beiträge_DokumenteHeftenAnBeiträge", Storage="_DokumenteHeftenAnBeiträges", ThisKey="ID", OtherKey="BeitragsID")]
		public EntitySet<DokumenteHeftenAnBeiträge> DokumenteHeftenAnBeiträges
		{
			get
			{
				return this._DokumenteHeftenAnBeiträges;
			}
			set
			{
				this._DokumenteHeftenAnBeiträges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beiträge_DokumenteHeftenAnBeiträge1", Storage="_DokumenteHeftenAnBeiträges1", ThisKey="ID", OtherKey="DokumentenID")]
		public EntitySet<DokumenteHeftenAnBeiträge> DokumenteHeftenAnBeiträges1
		{
			get
			{
				return this._DokumenteHeftenAnBeiträges1;
			}
			set
			{
				this._DokumenteHeftenAnBeiträges1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Beiträge", Storage="_Benutzer1", ThisKey="Benutzer", OtherKey="Nickname", IsForeignKey=true)]
		public Benutzer Benutzer1
		{
			get
			{
				return this._Benutzer1.Entity;
			}
			set
			{
				Benutzer previousValue = this._Benutzer1.Entity;
				if (((previousValue != value) 
							|| (this._Benutzer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benutzer1.Entity = null;
						previousValue.Beiträges.Remove(this);
					}
					this._Benutzer1.Entity = value;
					if ((value != null))
					{
						value.Beiträges.Add(this);
						this._Benutzer = value.Nickname;
					}
					else
					{
						this._Benutzer = default(string);
					}
					this.SendPropertyChanged("Benutzer1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diskussionen_Beiträge", Storage="_Diskussionen", ThisKey="DiskussionsID", OtherKey="ID", IsForeignKey=true)]
		public Diskussionen Diskussionen
		{
			get
			{
				return this._Diskussionen.Entity;
			}
			set
			{
				Diskussionen previousValue = this._Diskussionen.Entity;
				if (((previousValue != value) 
							|| (this._Diskussionen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Diskussionen.Entity = null;
						previousValue.Beiträges.Remove(this);
					}
					this._Diskussionen.Entity = value;
					if ((value != null))
					{
						value.Beiträges.Add(this);
						this._DiskussionsID = value.ID;
					}
					else
					{
						this._DiskussionsID = default(int);
					}
					this.SendPropertyChanged("Diskussionen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DokumenteHeftenAnBeiträges(DokumenteHeftenAnBeiträge entity)
		{
			this.SendPropertyChanging();
			entity.Beiträge = this;
		}
		
		private void detach_DokumenteHeftenAnBeiträges(DokumenteHeftenAnBeiträge entity)
		{
			this.SendPropertyChanging();
			entity.Beiträge = null;
		}
		
		private void attach_DokumenteHeftenAnBeiträges1(DokumenteHeftenAnBeiträge entity)
		{
			this.SendPropertyChanging();
			entity.Beiträge1 = this;
		}
		
		private void detach_DokumenteHeftenAnBeiträges1(DokumenteHeftenAnBeiträge entity)
		{
			this.SendPropertyChanging();
			entity.Beiträge1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Benutzer")]
	public partial class Benutzer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Nickname;
		
		private string _Vorname;
		
		private string _Nachname;
		
		private string _Passwort;
		
		private string _Email;
		
		private EntitySet<Beiträge> _Beiträges;
		
		private EntitySet<Dokumente> _Dokumentes;
		
		private EntityRef<Mitarbeiter> _Mitarbeiter;
		
		private EntityRef<Professoren> _Professoren;
		
		private EntityRef<Studenten> _Studenten;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnVornameChanging(string value);
    partial void OnVornameChanged();
    partial void OnNachnameChanging(string value);
    partial void OnNachnameChanged();
    partial void OnPasswortChanging(string value);
    partial void OnPasswortChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Benutzer()
		{
			this._Beiträges = new EntitySet<Beiträge>(new Action<Beiträge>(this.attach_Beiträges), new Action<Beiträge>(this.detach_Beiträges));
			this._Dokumentes = new EntitySet<Dokumente>(new Action<Dokumente>(this.attach_Dokumentes), new Action<Dokumente>(this.detach_Dokumentes));
			this._Mitarbeiter = default(EntityRef<Mitarbeiter>);
			this._Professoren = default(EntityRef<Professoren>);
			this._Studenten = default(EntityRef<Studenten>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vorname", DbType="VarChar(50)")]
		public string Vorname
		{
			get
			{
				return this._Vorname;
			}
			set
			{
				if ((this._Vorname != value))
				{
					this.OnVornameChanging(value);
					this.SendPropertyChanging();
					this._Vorname = value;
					this.SendPropertyChanged("Vorname");
					this.OnVornameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nachname", DbType="VarChar(50)")]
		public string Nachname
		{
			get
			{
				return this._Nachname;
			}
			set
			{
				if ((this._Nachname != value))
				{
					this.OnNachnameChanging(value);
					this.SendPropertyChanging();
					this._Nachname = value;
					this.SendPropertyChanged("Nachname");
					this.OnNachnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passwort", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Passwort
		{
			get
			{
				return this._Passwort;
			}
			set
			{
				if ((this._Passwort != value))
				{
					this.OnPasswortChanging(value);
					this.SendPropertyChanging();
					this._Passwort = value;
					this.SendPropertyChanged("Passwort");
					this.OnPasswortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Beiträge", Storage="_Beiträges", ThisKey="Nickname", OtherKey="Benutzer")]
		public EntitySet<Beiträge> Beiträges
		{
			get
			{
				return this._Beiträges;
			}
			set
			{
				this._Beiträges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Dokumente", Storage="_Dokumentes", ThisKey="Nickname", OtherKey="Benutzer")]
		public EntitySet<Dokumente> Dokumentes
		{
			get
			{
				return this._Dokumentes;
			}
			set
			{
				this._Dokumentes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Mitarbeiter", Storage="_Mitarbeiter", ThisKey="Nickname", OtherKey="Nickname", IsUnique=true, IsForeignKey=false)]
		public Mitarbeiter Mitarbeiter
		{
			get
			{
				return this._Mitarbeiter.Entity;
			}
			set
			{
				Mitarbeiter previousValue = this._Mitarbeiter.Entity;
				if (((previousValue != value) 
							|| (this._Mitarbeiter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mitarbeiter.Entity = null;
						previousValue.Benutzer = null;
					}
					this._Mitarbeiter.Entity = value;
					if ((value != null))
					{
						value.Benutzer = this;
					}
					this.SendPropertyChanged("Mitarbeiter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Professoren", Storage="_Professoren", ThisKey="Nickname", OtherKey="Nickname", IsUnique=true, IsForeignKey=false)]
		public Professoren Professoren
		{
			get
			{
				return this._Professoren.Entity;
			}
			set
			{
				Professoren previousValue = this._Professoren.Entity;
				if (((previousValue != value) 
							|| (this._Professoren.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professoren.Entity = null;
						previousValue.Benutzer = null;
					}
					this._Professoren.Entity = value;
					if ((value != null))
					{
						value.Benutzer = this;
					}
					this.SendPropertyChanged("Professoren");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Studenten", Storage="_Studenten", ThisKey="Nickname", OtherKey="Nickname", IsUnique=true, IsForeignKey=false)]
		public Studenten Studenten
		{
			get
			{
				return this._Studenten.Entity;
			}
			set
			{
				Studenten previousValue = this._Studenten.Entity;
				if (((previousValue != value) 
							|| (this._Studenten.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studenten.Entity = null;
						previousValue.Benutzer = null;
					}
					this._Studenten.Entity = value;
					if ((value != null))
					{
						value.Benutzer = this;
					}
					this.SendPropertyChanged("Studenten");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Beiträges(Beiträge entity)
		{
			this.SendPropertyChanging();
			entity.Benutzer1 = this;
		}
		
		private void detach_Beiträges(Beiträge entity)
		{
			this.SendPropertyChanging();
			entity.Benutzer1 = null;
		}
		
		private void attach_Dokumentes(Dokumente entity)
		{
			this.SendPropertyChanging();
			entity.Benutzer1 = this;
		}
		
		private void detach_Dokumentes(Dokumente entity)
		{
			this.SendPropertyChanging();
			entity.Benutzer1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Diskussionen")]
	public partial class Diskussionen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Titel;
		
		private int _AnzahlSichtungen;
		
		private int _ForumID;
		
		private EntitySet<Beiträge> _Beiträges;
		
		private EntityRef<Foren> _Foren;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitelChanging(string value);
    partial void OnTitelChanged();
    partial void OnAnzahlSichtungenChanging(int value);
    partial void OnAnzahlSichtungenChanged();
    partial void OnForumIDChanging(int value);
    partial void OnForumIDChanged();
    #endregion
		
		public Diskussionen()
		{
			this._Beiträges = new EntitySet<Beiträge>(new Action<Beiträge>(this.attach_Beiträges), new Action<Beiträge>(this.detach_Beiträges));
			this._Foren = default(EntityRef<Foren>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titel", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Titel
		{
			get
			{
				return this._Titel;
			}
			set
			{
				if ((this._Titel != value))
				{
					this.OnTitelChanging(value);
					this.SendPropertyChanging();
					this._Titel = value;
					this.SendPropertyChanged("Titel");
					this.OnTitelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnzahlSichtungen", DbType="Int NOT NULL")]
		public int AnzahlSichtungen
		{
			get
			{
				return this._AnzahlSichtungen;
			}
			set
			{
				if ((this._AnzahlSichtungen != value))
				{
					this.OnAnzahlSichtungenChanging(value);
					this.SendPropertyChanging();
					this._AnzahlSichtungen = value;
					this.SendPropertyChanged("AnzahlSichtungen");
					this.OnAnzahlSichtungenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int NOT NULL")]
		public int ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Foren.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diskussionen_Beiträge", Storage="_Beiträges", ThisKey="ID", OtherKey="DiskussionsID")]
		public EntitySet<Beiträge> Beiträges
		{
			get
			{
				return this._Beiträges;
			}
			set
			{
				this._Beiträges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Foren_Diskussionen", Storage="_Foren", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true)]
		public Foren Foren
		{
			get
			{
				return this._Foren.Entity;
			}
			set
			{
				Foren previousValue = this._Foren.Entity;
				if (((previousValue != value) 
							|| (this._Foren.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Foren.Entity = null;
						previousValue.Diskussionens.Remove(this);
					}
					this._Foren.Entity = value;
					if ((value != null))
					{
						value.Diskussionens.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(int);
					}
					this.SendPropertyChanged("Foren");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Beiträges(Beiträge entity)
		{
			this.SendPropertyChanging();
			entity.Diskussionen = this;
		}
		
		private void detach_Beiträges(Beiträge entity)
		{
			this.SendPropertyChanging();
			entity.Diskussionen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dokumente")]
	public partial class Dokumente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Kategorie;
		
		private System.Data.Linq.Binary _Datei;
		
		private string _Titel;
		
		private System.DateTime _Bereitstellungsdatum;
		
		private string _Benutzer;
		
		private int _ModulID;
		
		private EntityRef<Benutzer> _Benutzer1;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnKategorieChanging(string value);
    partial void OnKategorieChanged();
    partial void OnDateiChanging(System.Data.Linq.Binary value);
    partial void OnDateiChanged();
    partial void OnTitelChanging(string value);
    partial void OnTitelChanged();
    partial void OnBereitstellungsdatumChanging(System.DateTime value);
    partial void OnBereitstellungsdatumChanged();
    partial void OnBenutzerChanging(string value);
    partial void OnBenutzerChanged();
    partial void OnModulIDChanging(int value);
    partial void OnModulIDChanged();
    #endregion
		
		public Dokumente()
		{
			this._Benutzer1 = default(EntityRef<Benutzer>);
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kategorie", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Kategorie
		{
			get
			{
				return this._Kategorie;
			}
			set
			{
				if ((this._Kategorie != value))
				{
					this.OnKategorieChanging(value);
					this.SendPropertyChanging();
					this._Kategorie = value;
					this.SendPropertyChanged("Kategorie");
					this.OnKategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datei", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Datei
		{
			get
			{
				return this._Datei;
			}
			set
			{
				if ((this._Datei != value))
				{
					this.OnDateiChanging(value);
					this.SendPropertyChanging();
					this._Datei = value;
					this.SendPropertyChanged("Datei");
					this.OnDateiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titel", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Titel
		{
			get
			{
				return this._Titel;
			}
			set
			{
				if ((this._Titel != value))
				{
					this.OnTitelChanging(value);
					this.SendPropertyChanging();
					this._Titel = value;
					this.SendPropertyChanged("Titel");
					this.OnTitelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bereitstellungsdatum", DbType="DateTime NOT NULL")]
		public System.DateTime Bereitstellungsdatum
		{
			get
			{
				return this._Bereitstellungsdatum;
			}
			set
			{
				if ((this._Bereitstellungsdatum != value))
				{
					this.OnBereitstellungsdatumChanging(value);
					this.SendPropertyChanging();
					this._Bereitstellungsdatum = value;
					this.SendPropertyChanged("Bereitstellungsdatum");
					this.OnBereitstellungsdatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Benutzer", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Benutzer
		{
			get
			{
				return this._Benutzer;
			}
			set
			{
				if ((this._Benutzer != value))
				{
					if (this._Benutzer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBenutzerChanging(value);
					this.SendPropertyChanging();
					this._Benutzer = value;
					this.SendPropertyChanged("Benutzer");
					this.OnBenutzerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModulID", DbType="Int NOT NULL")]
		public int ModulID
		{
			get
			{
				return this._ModulID;
			}
			set
			{
				if ((this._ModulID != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModulIDChanging(value);
					this.SendPropertyChanging();
					this._ModulID = value;
					this.SendPropertyChanged("ModulID");
					this.OnModulIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Dokumente", Storage="_Benutzer1", ThisKey="Benutzer", OtherKey="Nickname", IsForeignKey=true)]
		public Benutzer Benutzer1
		{
			get
			{
				return this._Benutzer1.Entity;
			}
			set
			{
				Benutzer previousValue = this._Benutzer1.Entity;
				if (((previousValue != value) 
							|| (this._Benutzer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benutzer1.Entity = null;
						previousValue.Dokumentes.Remove(this);
					}
					this._Benutzer1.Entity = value;
					if ((value != null))
					{
						value.Dokumentes.Add(this);
						this._Benutzer = value.Nickname;
					}
					else
					{
						this._Benutzer = default(string);
					}
					this.SendPropertyChanged("Benutzer1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Dokumente", Storage="_Module", ThisKey="ModulID", OtherKey="ID", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.Dokumentes.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.Dokumentes.Add(this);
						this._ModulID = value.ID;
					}
					else
					{
						this._ModulID = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DokumenteHeftenAnBeiträge")]
	public partial class DokumenteHeftenAnBeiträge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BeitragsID;
		
		private int _DokumentenID;
		
		private EntityRef<Beiträge> _Beiträge;
		
		private EntityRef<Beiträge> _Beiträge1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeitragsIDChanging(int value);
    partial void OnBeitragsIDChanged();
    partial void OnDokumentenIDChanging(int value);
    partial void OnDokumentenIDChanged();
    #endregion
		
		public DokumenteHeftenAnBeiträge()
		{
			this._Beiträge = default(EntityRef<Beiträge>);
			this._Beiträge1 = default(EntityRef<Beiträge>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeitragsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BeitragsID
		{
			get
			{
				return this._BeitragsID;
			}
			set
			{
				if ((this._BeitragsID != value))
				{
					if (this._Beiträge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeitragsIDChanging(value);
					this.SendPropertyChanging();
					this._BeitragsID = value;
					this.SendPropertyChanged("BeitragsID");
					this.OnBeitragsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DokumentenID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DokumentenID
		{
			get
			{
				return this._DokumentenID;
			}
			set
			{
				if ((this._DokumentenID != value))
				{
					if (this._Beiträge1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDokumentenIDChanging(value);
					this.SendPropertyChanging();
					this._DokumentenID = value;
					this.SendPropertyChanged("DokumentenID");
					this.OnDokumentenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beiträge_DokumenteHeftenAnBeiträge", Storage="_Beiträge", ThisKey="BeitragsID", OtherKey="ID", IsForeignKey=true)]
		public Beiträge Beiträge
		{
			get
			{
				return this._Beiträge.Entity;
			}
			set
			{
				Beiträge previousValue = this._Beiträge.Entity;
				if (((previousValue != value) 
							|| (this._Beiträge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Beiträge.Entity = null;
						previousValue.DokumenteHeftenAnBeiträges.Remove(this);
					}
					this._Beiträge.Entity = value;
					if ((value != null))
					{
						value.DokumenteHeftenAnBeiträges.Add(this);
						this._BeitragsID = value.ID;
					}
					else
					{
						this._BeitragsID = default(int);
					}
					this.SendPropertyChanged("Beiträge");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beiträge_DokumenteHeftenAnBeiträge1", Storage="_Beiträge1", ThisKey="DokumentenID", OtherKey="ID", IsForeignKey=true)]
		public Beiträge Beiträge1
		{
			get
			{
				return this._Beiträge1.Entity;
			}
			set
			{
				Beiträge previousValue = this._Beiträge1.Entity;
				if (((previousValue != value) 
							|| (this._Beiträge1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Beiträge1.Entity = null;
						previousValue.DokumenteHeftenAnBeiträges1.Remove(this);
					}
					this._Beiträge1.Entity = value;
					if ((value != null))
					{
						value.DokumenteHeftenAnBeiträges1.Add(this);
						this._DokumentenID = value.ID;
					}
					else
					{
						this._DokumentenID = default(int);
					}
					this.SendPropertyChanged("Beiträge1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Foren")]
	public partial class Foren : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Bezeichnung;
		
		private System.Nullable<int> _OberforumID;
		
		private EntitySet<Diskussionen> _Diskussionens;
		
		private EntitySet<Foren> _Forens;
		
		private EntitySet<Module> _Modules;
		
		private EntityRef<Foren> _Foren1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBezeichnungChanging(string value);
    partial void OnBezeichnungChanged();
    partial void OnOberforumIDChanging(System.Nullable<int> value);
    partial void OnOberforumIDChanged();
    #endregion
		
		public Foren()
		{
			this._Diskussionens = new EntitySet<Diskussionen>(new Action<Diskussionen>(this.attach_Diskussionens), new Action<Diskussionen>(this.detach_Diskussionens));
			this._Forens = new EntitySet<Foren>(new Action<Foren>(this.attach_Forens), new Action<Foren>(this.detach_Forens));
			this._Modules = new EntitySet<Module>(new Action<Module>(this.attach_Modules), new Action<Module>(this.detach_Modules));
			this._Foren1 = default(EntityRef<Foren>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bezeichnung", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Bezeichnung
		{
			get
			{
				return this._Bezeichnung;
			}
			set
			{
				if ((this._Bezeichnung != value))
				{
					this.OnBezeichnungChanging(value);
					this.SendPropertyChanging();
					this._Bezeichnung = value;
					this.SendPropertyChanged("Bezeichnung");
					this.OnBezeichnungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OberforumID", DbType="Int")]
		public System.Nullable<int> OberforumID
		{
			get
			{
				return this._OberforumID;
			}
			set
			{
				if ((this._OberforumID != value))
				{
					if (this._Foren1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOberforumIDChanging(value);
					this.SendPropertyChanging();
					this._OberforumID = value;
					this.SendPropertyChanged("OberforumID");
					this.OnOberforumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Foren_Diskussionen", Storage="_Diskussionens", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<Diskussionen> Diskussionens
		{
			get
			{
				return this._Diskussionens;
			}
			set
			{
				this._Diskussionens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Foren_Foren", Storage="_Forens", ThisKey="ID", OtherKey="OberforumID")]
		public EntitySet<Foren> Forens
		{
			get
			{
				return this._Forens;
			}
			set
			{
				this._Forens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Foren_Module", Storage="_Modules", ThisKey="ID", OtherKey="ForumID")]
		public EntitySet<Module> Modules
		{
			get
			{
				return this._Modules;
			}
			set
			{
				this._Modules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Foren_Foren", Storage="_Foren1", ThisKey="OberforumID", OtherKey="ID", IsForeignKey=true)]
		public Foren Foren1
		{
			get
			{
				return this._Foren1.Entity;
			}
			set
			{
				Foren previousValue = this._Foren1.Entity;
				if (((previousValue != value) 
							|| (this._Foren1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Foren1.Entity = null;
						previousValue.Forens.Remove(this);
					}
					this._Foren1.Entity = value;
					if ((value != null))
					{
						value.Forens.Add(this);
						this._OberforumID = value.ID;
					}
					else
					{
						this._OberforumID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Foren1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Diskussionens(Diskussionen entity)
		{
			this.SendPropertyChanging();
			entity.Foren = this;
		}
		
		private void detach_Diskussionens(Diskussionen entity)
		{
			this.SendPropertyChanging();
			entity.Foren = null;
		}
		
		private void attach_Forens(Foren entity)
		{
			this.SendPropertyChanging();
			entity.Foren1 = this;
		}
		
		private void detach_Forens(Foren entity)
		{
			this.SendPropertyChanging();
			entity.Foren1 = null;
		}
		
		private void attach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Foren = this;
		}
		
		private void detach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Foren = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mitarbeiter")]
	public partial class Mitarbeiter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Nickname;
		
		private string _RaumNr;
		
		private string _Aufgabenbereich;
		
		private EntityRef<Benutzer> _Benutzer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnRaumNrChanging(string value);
    partial void OnRaumNrChanged();
    partial void OnAufgabenbereichChanging(string value);
    partial void OnAufgabenbereichChanged();
    #endregion
		
		public Mitarbeiter()
		{
			this._Benutzer = default(EntityRef<Benutzer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					if (this._Benutzer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaumNr", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RaumNr
		{
			get
			{
				return this._RaumNr;
			}
			set
			{
				if ((this._RaumNr != value))
				{
					this.OnRaumNrChanging(value);
					this.SendPropertyChanging();
					this._RaumNr = value;
					this.SendPropertyChanged("RaumNr");
					this.OnRaumNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aufgabenbereich", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Aufgabenbereich
		{
			get
			{
				return this._Aufgabenbereich;
			}
			set
			{
				if ((this._Aufgabenbereich != value))
				{
					this.OnAufgabenbereichChanging(value);
					this.SendPropertyChanging();
					this._Aufgabenbereich = value;
					this.SendPropertyChanged("Aufgabenbereich");
					this.OnAufgabenbereichChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Mitarbeiter", Storage="_Benutzer", ThisKey="Nickname", OtherKey="Nickname", IsForeignKey=true)]
		public Benutzer Benutzer
		{
			get
			{
				return this._Benutzer.Entity;
			}
			set
			{
				Benutzer previousValue = this._Benutzer.Entity;
				if (((previousValue != value) 
							|| (this._Benutzer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benutzer.Entity = null;
						previousValue.Mitarbeiter = null;
					}
					this._Benutzer.Entity = value;
					if ((value != null))
					{
						value.Mitarbeiter = this;
						this._Nickname = value.Nickname;
					}
					else
					{
						this._Nickname = default(string);
					}
					this.SendPropertyChanged("Benutzer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Module")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Bezeichnung;
		
		private int _FachNummer;
		
		private string _Verantwortlicher;
		
		private System.Nullable<int> _ForumID;
		
		private EntitySet<Dokumente> _Dokumentes;
		
		private EntityRef<Foren> _Foren;
		
		private EntityRef<Professoren> _Professoren;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBezeichnungChanging(string value);
    partial void OnBezeichnungChanged();
    partial void OnFachNummerChanging(int value);
    partial void OnFachNummerChanged();
    partial void OnVerantwortlicherChanging(string value);
    partial void OnVerantwortlicherChanged();
    partial void OnForumIDChanging(System.Nullable<int> value);
    partial void OnForumIDChanged();
    #endregion
		
		public Module()
		{
			this._Dokumentes = new EntitySet<Dokumente>(new Action<Dokumente>(this.attach_Dokumentes), new Action<Dokumente>(this.detach_Dokumentes));
			this._Foren = default(EntityRef<Foren>);
			this._Professoren = default(EntityRef<Professoren>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bezeichnung", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Bezeichnung
		{
			get
			{
				return this._Bezeichnung;
			}
			set
			{
				if ((this._Bezeichnung != value))
				{
					this.OnBezeichnungChanging(value);
					this.SendPropertyChanging();
					this._Bezeichnung = value;
					this.SendPropertyChanged("Bezeichnung");
					this.OnBezeichnungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FachNummer", DbType="Int NOT NULL")]
		public int FachNummer
		{
			get
			{
				return this._FachNummer;
			}
			set
			{
				if ((this._FachNummer != value))
				{
					this.OnFachNummerChanging(value);
					this.SendPropertyChanging();
					this._FachNummer = value;
					this.SendPropertyChanged("FachNummer");
					this.OnFachNummerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verantwortlicher", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Verantwortlicher
		{
			get
			{
				return this._Verantwortlicher;
			}
			set
			{
				if ((this._Verantwortlicher != value))
				{
					if (this._Professoren.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVerantwortlicherChanging(value);
					this.SendPropertyChanging();
					this._Verantwortlicher = value;
					this.SendPropertyChanged("Verantwortlicher");
					this.OnVerantwortlicherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", DbType="Int")]
		public System.Nullable<int> ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					if (this._Foren.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Dokumente", Storage="_Dokumentes", ThisKey="ID", OtherKey="ModulID")]
		public EntitySet<Dokumente> Dokumentes
		{
			get
			{
				return this._Dokumentes;
			}
			set
			{
				this._Dokumentes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Foren_Module", Storage="_Foren", ThisKey="ForumID", OtherKey="ID", IsForeignKey=true)]
		public Foren Foren
		{
			get
			{
				return this._Foren.Entity;
			}
			set
			{
				Foren previousValue = this._Foren.Entity;
				if (((previousValue != value) 
							|| (this._Foren.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Foren.Entity = null;
						previousValue.Modules.Remove(this);
					}
					this._Foren.Entity = value;
					if ((value != null))
					{
						value.Modules.Add(this);
						this._ForumID = value.ID;
					}
					else
					{
						this._ForumID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Foren");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professoren_Module", Storage="_Professoren", ThisKey="Verantwortlicher", OtherKey="Nickname", IsForeignKey=true)]
		public Professoren Professoren
		{
			get
			{
				return this._Professoren.Entity;
			}
			set
			{
				Professoren previousValue = this._Professoren.Entity;
				if (((previousValue != value) 
							|| (this._Professoren.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professoren.Entity = null;
						previousValue.Modules.Remove(this);
					}
					this._Professoren.Entity = value;
					if ((value != null))
					{
						value.Modules.Add(this);
						this._Verantwortlicher = value.Nickname;
					}
					else
					{
						this._Verantwortlicher = default(string);
					}
					this.SendPropertyChanged("Professoren");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dokumentes(Dokumente entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_Dokumentes(Dokumente entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Professoren")]
	public partial class Professoren : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Nickname;
		
		private string _AkademischerTitel;
		
		private EntitySet<Module> _Modules;
		
		private EntityRef<Benutzer> _Benutzer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnAkademischerTitelChanging(string value);
    partial void OnAkademischerTitelChanged();
    #endregion
		
		public Professoren()
		{
			this._Modules = new EntitySet<Module>(new Action<Module>(this.attach_Modules), new Action<Module>(this.detach_Modules));
			this._Benutzer = default(EntityRef<Benutzer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					if (this._Benutzer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AkademischerTitel", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string AkademischerTitel
		{
			get
			{
				return this._AkademischerTitel;
			}
			set
			{
				if ((this._AkademischerTitel != value))
				{
					this.OnAkademischerTitelChanging(value);
					this.SendPropertyChanging();
					this._AkademischerTitel = value;
					this.SendPropertyChanged("AkademischerTitel");
					this.OnAkademischerTitelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professoren_Module", Storage="_Modules", ThisKey="Nickname", OtherKey="Verantwortlicher")]
		public EntitySet<Module> Modules
		{
			get
			{
				return this._Modules;
			}
			set
			{
				this._Modules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Professoren", Storage="_Benutzer", ThisKey="Nickname", OtherKey="Nickname", IsForeignKey=true)]
		public Benutzer Benutzer
		{
			get
			{
				return this._Benutzer.Entity;
			}
			set
			{
				Benutzer previousValue = this._Benutzer.Entity;
				if (((previousValue != value) 
							|| (this._Benutzer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benutzer.Entity = null;
						previousValue.Professoren = null;
					}
					this._Benutzer.Entity = value;
					if ((value != null))
					{
						value.Professoren = this;
						this._Nickname = value.Nickname;
					}
					else
					{
						this._Nickname = default(string);
					}
					this.SendPropertyChanged("Benutzer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Professoren = this;
		}
		
		private void detach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Professoren = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Studenten")]
	public partial class Studenten : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Nickname;
		
		private int _Matrikel;
		
		private System.DateTime _EinschreibeDatum;
		
		private EntityRef<Benutzer> _Benutzer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnMatrikelChanging(int value);
    partial void OnMatrikelChanged();
    partial void OnEinschreibeDatumChanging(System.DateTime value);
    partial void OnEinschreibeDatumChanged();
    #endregion
		
		public Studenten()
		{
			this._Benutzer = default(EntityRef<Benutzer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					if (this._Benutzer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Matrikel", DbType="Int NOT NULL")]
		public int Matrikel
		{
			get
			{
				return this._Matrikel;
			}
			set
			{
				if ((this._Matrikel != value))
				{
					this.OnMatrikelChanging(value);
					this.SendPropertyChanging();
					this._Matrikel = value;
					this.SendPropertyChanged("Matrikel");
					this.OnMatrikelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EinschreibeDatum", DbType="DateTime NOT NULL")]
		public System.DateTime EinschreibeDatum
		{
			get
			{
				return this._EinschreibeDatum;
			}
			set
			{
				if ((this._EinschreibeDatum != value))
				{
					this.OnEinschreibeDatumChanging(value);
					this.SendPropertyChanging();
					this._EinschreibeDatum = value;
					this.SendPropertyChanged("EinschreibeDatum");
					this.OnEinschreibeDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benutzer_Studenten", Storage="_Benutzer", ThisKey="Nickname", OtherKey="Nickname", IsForeignKey=true)]
		public Benutzer Benutzer
		{
			get
			{
				return this._Benutzer.Entity;
			}
			set
			{
				Benutzer previousValue = this._Benutzer.Entity;
				if (((previousValue != value) 
							|| (this._Benutzer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benutzer.Entity = null;
						previousValue.Studenten = null;
					}
					this._Benutzer.Entity = value;
					if ((value != null))
					{
						value.Studenten = this;
						this._Nickname = value.Nickname;
					}
					else
					{
						this._Nickname = default(string);
					}
					this.SendPropertyChanged("Benutzer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
